estimate.mean.fraglen(gr)
names(gr)
class(cstest)
names(cstest)
class(cstest$ctcf)
names(genes)
#Set up a data frame with the gene information, to convert to a GRanges object.#
genes <- rep(NULL,20)#
names(genes) <- paste("gene",1:20,sep="")
genome
genes <- rep(NULL,20)#
names(genes) <- paste("gene",1:20,sep="")#
#
gene_data <- data.frame(sequence=genes,#
	start = seq(1,1000,by=50),#
	end = seq(50,1000,by=50),#
	length = rep(50,times=20),#
	names = paste("gene",1:20,sep=""))
genes <- rep(NULL,20)#
#
gene_data <- data.frame(sequence=genes,#
	start = seq(1,1000,by=50),#
	end = seq(50,1000,by=50),#
	length = rep(50,times=20),#
	names = paste("gene",1:20,sep=""))#
#
names(genes) <- paste("gene",1:20,sep="")
genes
gene_data <- data.frame(#
	start = seq(1,1000,by=50),#
	end = seq(50,1000,by=50),#
	length = rep(50,times=20),#
	names = paste("gene",1:20,sep=""))
gene_data
gene_data$sequence <- rep(NULL,20)
gene_data
for (i in 1:20){ genes[i] <- substr(genome,gene_data$start[i],gene_data$end[i])}
genes
gene_data$seqs <- genes
gene_data
names(genes) <- paste("gene",1:20,sep="")
rownames(gene_data) <- paste("gene",1:20,sep="")
gene_data
IRanges(gene_data)
gr <- GRanges(seqnames=rownames(gene_data),#
	IRanges(start=gene_data$start,end=gene_data$end,width=gene_data$length,names=gene_data$names),#
	strand=genome,seqlengths=rep(50,20))
gr <- makeGRangesFromDataFrame(gene_data,seqnames.field="names")
assay(gr)
head(gr)
gr <- makeGRangesFromDataFrame(gene_data,seqnames.field="names",ignore.strand=F)
gr <- makeGRangesFromDataFrame(gene_data,seqnames.field="names",ignore.strand=F)
estimate.mean.fraglen(gr)
warnings()
values(gr)[,"myseqs"] <- DNAStringSet(gene_data$seqs)
gr
estimate.mean.fraglen(gr)
head(hip)
plot(hip$LogPeriod)
plot(hip$A14)
plot(log(hip$A14))
plot(hip$LogPeriod,col=c('red','blue','green','purple','pink')[hip$class])
plot(hip$LogPeriod,col=c('red','blue','green','purple','black')[hip$class])
plot(hip$LogPeriod,col=c('red','blue','dark green','purple','black')[hip$class])
par(mfrow=c(1,2))#
plot(hip$LogPeriod,col=c('red','blue','dark green','purple','black')[hip$class])#
#
plot(log(hip$A14),col=c('red','blue','dark green','purple','black')[hip$class])
plot(hip$LogPeriod,col=c('red','blue','dark green','purple','black')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('red','blue','dark green','blueviolet','black')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('red','light blue','dark green','blueviolet','black')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('red','light blue','navy','blueviolet','black')[hip$class],pch=16)
par(mfrow=c(1,2))#
plot(hip$LogPeriod,col=c('red','light blue','navy','blueviolet','black')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('red','light blue','navy','magenta','black')[hip$class],pch=16)
par(mfrow=c(1,2))#
plot(hip$LogPeriod,col=c('steelblue4','light blue','navy','magenta','black')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('steelblue','light blue','navy','magenta','black')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('steelblue','skyblue1','navy','magenta','black')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('steelblue4','skyblue1','navy','magenta','black')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('steelblue4','skyblue1','navy','magenta','chartreuse')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('steelblue4','skyblue1','yellow','magenta','chartreuse')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('steelblue4','skyblue1','orange','magenta','chartreuse')[hip$class],pch=16)
par(mfrow=c(1,2))#
plot(hip$LogPeriod,col=c('steelblue4','dodgerblue3','orange','magenta','chartreuse')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('gold','dodgerblue3','forestgreen','magenta','orange')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orange','red')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=16)
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class])
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=12)
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=19)
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=2)
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(log(hip$A14),col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class])
plot(log(hip$A14),col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot((hip$A14),col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
temp
plot((hip$p2pslope),col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot((hip$PH15),col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot((hip$log(PH15)),col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(log(hip$PH15),col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$variation5Bin2)
plot(hip$variation5bin2,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(is.finite(hip$variation5bin2),col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
temp
plot(hip$Raw_WeightedStdDev,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$Raw_PercentileSkewness,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$logSigmaPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$WstetsonJweighted,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$LogPeriodMethodLomb ,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$LogAmplitude ,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$frequencyErrorRatio  ,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$logPqso  ,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$Detr_LogRange ,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20)
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20,#
	main='Scatter plot of LogPeriod feature',xylab=' ',ylab='LogPeriod')
par(mfrow=c(1,2))#
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20,#
	main='Scatter plot of LogPeriod feature by class',xylab=' ',ylab='LogPeriod')#
plot(hip$Detr_LogRange ,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20,#
	main='Scatter plot of Detr_LogRange feature by class',xylab=' ',ylab='Detr_LogRange')
par(mfrow=c(1,2))#
plot(hip$LogPeriod,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20,#
	main='LogPeriod feature by class',xylab=' ',ylab='LogPeriod')#
plot(hip$Detr_LogRange ,col=c('forestgreen','dodgerblue3','gold','orangered','red4')[hip$class],pch=20,#
	main='Detr_LogRange feature by class',xylab=' ',ylab='Detr_LogRange')
p <- calcProps(hip)
p
#p <- c(.1,.3,.2,.05,.35)#
n1 <- 1000; n2 <- 3000#
hip1a_strata <- strata(data=hip,stratanames="class",size=p*n1,method='srswr')#
hip1b_strata <- strata(data=hip,stratanames="class",size=p*n2,method='srswr')#
#
#Extract observed data:#
hip1a <- getdata(hip,hip1_strata)#
hip1b <- getdata(hip,hip2_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip1a <- data.frame(class=hip1a$class,hip1a[,1:141])#
hip1b <- data.frame(class=hip1b$class,hip1b[,1:141])#
#
table(hip1a$class)#
table(hip1b$class)#
#
#Classification is successful here, even when proportions vary a bit.#
ctrl <- trainControl(method='none', classProbs=F) #Fit one model to the data.         #
grid <- data.frame(.mtry=round(sqrt(length(feature_names)))) #Sets a grid of mtry values (just 1, here).#
#
#OOB RF with Feature Selection: Train model using out of box RF. #
ctrl$sampling <- NULL #Adjust sampling parameter in trainControl.#
model1 <- myRF(known=hip1a, unknown=hip1b,ctrl=ctrl,keeps=c('class',feature_names),grid=grid,sampsize=NULL)#
#
#PLOTS:#
#Plot of joint densities for a given feature:#
plot(density(hip1a$logPeriod),type='l',col='black',#
	main='Feature: LogPeriod.  All classes, with similar class proportions.')#
lines(density(hip1b$logPeriod),type='l',col='blue')
em1 <- emAllFeatures(known=hip1a,unknown=hip1b,p=rep(.2,5),maxiter=1000,conv=.00000001)#
em1$p#
calcProps(hip1b)
plot(calcProps(hip1b),col='black',pch=16,main='Identical class proportions',#
	xaxt='n',xlab='MSE = 0.00015',ylab='Proportions: Black=Actual, Blue=Est')#
axis(1,at=1:5,labels=classes)	#
points(em1$p,col='blue',pch=16)
p <- c(.55,.35,.05,.10,.01)
sum(p)
p <- c(.55,.3,.05,.10,.01)
sum(p)
p <- c(.55,.30,.05,.09,.01)
sum(p)
p <- c(.55,.30,.05,.09,.01)#
n1 <- 1000; n2 <- 3000#
hip1a_strata <- strata(data=hip,stratanames="class",size=p*n1,method='srswr')#
hip1b_strata <- strata(data=hip,stratanames="class",size=p*n2,method='srswr')#
#
#Extract observed data:#
hip1a <- getdata(hip,hip1_strata)#
hip1b <- getdata(hip,hip2_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip1a <- data.frame(class=hip1a$class,hip1a[,1:141])#
hip1b <- data.frame(class=hip1b$class,hip1b[,1:141])#
#
table(hip1a$class)#
table(hip1b$class)#
#
#Classification is successful here, even when proportions vary a bit.#
ctrl <- trainControl(method='none', classProbs=F) #Fit one model to the data.         #
grid <- data.frame(.mtry=round(sqrt(length(feature_names)))) #Sets a grid of mtry values (just 1, here).#
#
#OOB RF with Feature Selection: Train model using out of box RF. #
ctrl$sampling <- NULL #Adjust sampling parameter in trainControl.#
model1 <- myRF(known=hip1a, unknown=hip1b,ctrl=ctrl,keeps=c('class',feature_names),grid=grid,sampsize=NULL)#
#
#PLOTS:#
#Plot of joint densities for a given feature:#
plot(density(hip1a$logPeriod),type='l',col='black',#
	main='Feature: LogPeriod.  All classes, with similar class proportions.')#
lines(density(hip1b$logPeriod),type='l',col='blue')
model1
calcProps(linear)
p2 <- c(.35,.005,.40,.15,.015)
sum(p2)
p2 <- c(.35,.005,.40,.15,.02)
p2
sum(p2)
p2 <- c(.35,.005,.45,.15,.05)
p2
sum(p2)
p2 <- c(.35,.005,.45,.15,.045)
sum(p2)
#Pull two random data sets from hip, with similar class proportions.#
#One will be treated as 'known', and the other as 'unknown', for classification demo.#
#
#p1 <- calcProps(hip)#
#p2 <- calcProps(linear)#
p1 <- c(.55,.30,.05,.09,.01)#
p2 <- c(.35,.005,.45,.15,.045)#
n1 <- 1000; n2 <- 3000#
hip2a_strata <- strata(data=hip,stratanames="class",size=p1*n1,method='srswr')#
hip2b_strata <- strata(data=hip,stratanames="class",size=p2*n2,method='srswr')#
#
#Extract observed data:#
hip2a <- getdata(hip,hip2a_strata)#
hip2b <- getdata(hip,hip2b_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip2a <- data.frame(class=hip2a$class,hip2a[,1:141])#
hip2b <- data.frame(class=hip2b$class,hip2b[,1:141])#
#
table(hip2a$class)#
table(hip2b$class)#
#
#Classification is successful here, even when proportions vary a bit.#
ctrl <- trainControl(method='none', classProbs=F) #Fit one model to the data.         #
grid <- data.frame(.mtry=round(sqrt(length(feature_names)))) #Sets a grid of mtry values (just 1, here).#
#
#OOB RF with Feature Selection: Train model using out of box RF. #
ctrl$sampling <- NULL #Adjust sampling parameter in trainControl.#
model2 <- myRF(known=hip2a, unknown=hip2b,ctrl=ctrl,keeps=c('class',feature_names),grid=grid,sampsize=NULL)#
#
#PLOTS:#
#Plot of joint densities for a given feature:#
plot(density(hip2a$logPeriod),type='l',col='black',#
	main='Feature: LogPeriod.  All classes, with different class proportions.')#
lines(density(hip2b$logPeriod),type='l',col='blue')
model2
model1
p1 <- c(.55,.30,.05,.09,.01)#
p2 <- calcProps(linear)#
n1 <- 1000; n2 <- 3000#
hip2a_strata <- strata(data=hip,stratanames="class",size=p1*n1,method='srswr')#
hip2b_strata <- strata(data=hip,stratanames="class",size=p2*n2,method='srswr')#
#
#Extract observed data:#
hip2a <- getdata(hip,hip2a_strata)#
hip2b <- getdata(hip,hip2b_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip2a <- data.frame(class=hip2a$class,hip2a[,1:141])#
hip2b <- data.frame(class=hip2b$class,hip2b[,1:141])#
#
table(hip2a$class)#
table(hip2b$class)#
#
#Classification is successful here, even when proportions vary a bit.#
ctrl <- trainControl(method='none', classProbs=F) #Fit one model to the data.         #
grid <- data.frame(.mtry=round(sqrt(length(feature_names)))) #Sets a grid of mtry values (just 1, here).#
#
#OOB RF with Feature Selection: Train model using out of box RF. #
ctrl$sampling <- NULL #Adjust sampling parameter in trainControl.#
model2 <- myRF(known=hip2a, unknown=hip2b,ctrl=ctrl,keeps=c('class',feature_names),grid=grid,sampsize=NULL)#
#
#PLOTS:#
#Plot of joint densities for a given feature:#
plot(density(hip2a$logPeriod),type='l',col='black',#
	main='Feature: LogPeriod.  All classes, with different class proportions.')#
lines(density(hip2b$logPeriod),type='l',col='blue')
model1
model2
p <- calcProps(hip)#
n1 <- 1000; n2 <- 3000#
hip1a_strata <- strata(data=hip,stratanames="class",size=p*n1,method='srswr')#
hip1b_strata <- strata(data=hip,stratanames="class",size=p*n2,method='srswr')#
#
#Extract observed data:#
hip1a <- getdata(hip,hip1_strata)#
hip1b <- getdata(hip,hip2_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip1a <- data.frame(class=hip1a$class,hip1a[,1:141])#
hip1b <- data.frame(class=hip1b$class,hip1b[,1:141])#
#
table(hip1a$class)#
table(hip1b$class)#
#
#Classification is successful here, even when proportions vary a bit.#
ctrl <- trainControl(method='none', classProbs=F) #Fit one model to the data.         #
grid <- data.frame(.mtry=round(sqrt(length(feature_names)))) #Sets a grid of mtry values (just 1, here).#
#
#OOB RF with Feature Selection: Train model using out of box RF. #
ctrl$sampling <- NULL #Adjust sampling parameter in trainControl.#
model1 <- myRF(known=hip1a, unknown=hip1b,ctrl=ctrl,keeps=c('class',feature_names),grid=grid,sampsize=NULL)#
#
#PLOTS:#
#Plot of joint densities for a given feature:#
plot(density(hip1a$logPeriod),type='l',col='black',#
	main='Feature: LogPeriod.  All classes, with similar class proportions.')#
lines(density(hip1b$logPeriod),type='l',col='blue')
model1
p1 <- calcProps(hip)#
p2 <- calcProps(linear)#
n1 <- 1000; n2 <- 3000#
hip2a_strata <- strata(data=hip,stratanames="class",size=p1*n1,method='srswr')#
hip2b_strata <- strata(data=hip,stratanames="class",size=p2*n2,method='srswr')#
#
#Extract observed data:#
hip2a <- getdata(hip,hip2a_strata)#
hip2b <- getdata(hip,hip2b_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip2a <- data.frame(class=hip2a$class,hip2a[,1:141])#
hip2b <- data.frame(class=hip2b$class,hip2b[,1:141])#
#
table(hip2a$class)#
table(hip2b$class)#
#
#Classification is successful here, even when proportions vary a bit.#
ctrl <- trainControl(method='none', classProbs=F) #Fit one model to the data.         #
grid <- data.frame(.mtry=round(sqrt(length(feature_names)))) #Sets a grid of mtry values (just 1, here).#
#
#OOB RF with Feature Selection: Train model using out of box RF. #
ctrl$sampling <- NULL #Adjust sampling parameter in trainControl.#
model2 <- myRF(known=hip2a, unknown=hip2b,ctrl=ctrl,keeps=c('class',feature_names),grid=grid,sampsize=NULL)#
#
#PLOTS:#
#Plot of joint densities for a given feature:#
plot(density(hip2a$logPeriod),type='l',col='black',#
	main='Feature: LogPeriod.  All classes, with different class proportions.')#
lines(density(hip2b$logPeriod),type='l',col='blue')
model2
p1
p2
round(p2,2)
round(p1,2)
round(p2,2)
plot()
hip2a[hip2a$class=='eb','A14']
hip2a$A14
training_densities <- list(#
	hip2a[hip2a$class=='eb','A14'],#
	hip2a[hip2a$class=='lpv','A14'],#
	hip2a[hip2a$class=='rrab','A14'],#
	hip2a[hip2a$class=='rrc','A14'],#
	hip2a[hip2a$class=='sxp_ds','A14'])
length(training_densities)
train <- list(#
	hip2a[hip2a$class=='eb','A14'],#
	hip2a[hip2a$class=='lpv','A14'],#
	hip2a[hip2a$class=='rrab','A14'],#
	hip2a[hip2a$class=='rrc','A14'],#
	hip2a[hip2a$class=='sxp_ds','A14'])
plot(density(train[1]),col='black')
plot(density(train[[1]]),col='black')
plot(density(train[[1]]),col='black')#
lines(density(train[[2]]),col='blue')#
lines(density(train[[3]]),col='red')#
lines(density(train[[4]]),col='forestgreen')#
lines(density(train[[5]]),col='purple')
plot(density(train[[1]]),col='black',xlim=c(-.05,.10))#
lines(density(train[[2]]),col='blue')#
lines(density(train[[3]]),col='red')#
lines(density(train[[4]]),col='forestgreen')#
lines(density(train[[5]]),col='purple')
plot(density(train[[1]]),col='black',xlim=c(-.025,.10))#
lines(density(train[[2]]),col='blue')#
lines(density(train[[3]]),col='red')#
lines(density(train[[4]]),col='forestgreen')#
lines(density(train[[5]]),col='purple')
plot(density(train[[1]]),col='black',xlim=c(-.025,.10),main='Training Set Densities: Feature A14')#
lines(density(train[[2]]),col='blue')#
lines(density(train[[3]]),col='red')#
lines(density(train[[4]]),col='forestgreen')#
lines(density(train[[5]]),col='purple')
plot(density(hip2b$A14),col='black')
plot(density(hip2a$A14),col='black')#
plot(density(hip2b$A14),col='blue')
plot(density(hip2a$A14),col='black')#
lines(density(hip2b$A14),col='blue')
calcProps(hip2a)
calcProps(hip2b)
em$2
em2
em2$p
calcProps(hip1a)
calcProps(hip2a)
hip_rebalanced <- strata(data=hip,stratanames='class',size=em2$p*n2,method='srswr')#
hip_rebal <- getdata(hip2a,hip_rebalanced)
calcProps(hip_rebal)
em2$p
hip_rebalanced <- strata(data=hip,stratanames='class',size=em2$p*nrow(hip2a),method='srswr')#
hip_rebal <- getdata(hip2a,hip_rebalanced)
em2$p
calcProps(hip_rebal)
calcProps(hip2b)
hip_rebal_strata <- strata(data=hip2a,stratanames='class',size=em2$p*nrow(hip2a),method='srswr')#
hip_rebal <- getdata(hip2a,hip_rebalanced)
em2$p#
calcProps(hip_rebal)
plot(density(hip2a$A14),col='black')#
lines(density(hip2b$A14),col='blue')#
#
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
hip_rebal_strata <- strata(data=hip2a,stratanames='class',size=em2$p*nrow(hip2a),method='srswr')#
hip_rebal <- getdata(hip2a,hip_rebalanced)#
#
em2$p#
calcProps(hip_rebal)#
#
lines(density(hip_rebal$A14),col='red')
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
hip_rebal_strata <- strata(data=hip,stratanames='class',size=em2$p*nrow(hip),method='srswr')#
hip_rebal <- getdata(hip,hip_rebalanced)
em2$p#
calcProps(hip_rebal)
calcProps(hip2b)
pe <- em2$p
pe
p1
p2
calcProprs(hip2b)
calcProps(hip2)
calcProps(hip2b)
pe
pe <- em2$p#
#
hip2em_strata <- strata(data=hip,stratanames="class",size=pe*n2,method='srswr')#
#
#Extract observed data:#
hip2em <- getdata(hip,hip2em_strata)
calcProps(hip2em)
em2$p#
calcProps(hip2em)
calcProps(hip)
calcProps(hip2a)
calcProps(hip2b)
em2$p
em2$p*nrow(hip)
em2$p*nrow(hip)/nrow(hip)
rebal_strata <- strata(data=hip,stratanames='class',size=em2$p*nrow(hip),method='srswr')
rebal_strata
head(rebal_strata)
table(rebal_strata$Stratum)
table(rebal_strata$Stratum)/nrow(hip)
em2$p
hip_rebal <- getdata(hip,rebal_strata)
calcProps(hip_rebal)
rebal_strata <- strata(data=hip,stratanames='class',size=em2$p*n2,method='srswr')#
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2
hip_rebal <- getdata(hip,rebal_strata)
calcProps(hip_rebal)
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
rebal_strata <- strata(data=hip,stratanames='class',size=em2$p*n2,method='srswr')#
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
#
hip_rebal <- getdata(hip,rebal_strata)#
lines(density(hip_rebal$A14),col='red')#
#
calcProps(hip_rebal)#
em2$p
table(rebal_strata$Stratum)/n2#
em2$p
rebal_strata <- strata(data=hip,stratanames="class",size=em2$p*n2,method='srswr')
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
em2$p
hip_rebal <- getdata(hip,rebal_strata)
calcProps(hip_rebal)
rm(hip_rebal)
hip_rebal
rebal_strata <- strata(data=hip,stratanames="class",size=em2$p*n2,method='srswr')#
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
em2$p#
#
hip_rebal <- getdata(hip,rebal_strata)#
calcProps(hip_rebal)#
em2$p
hip_rebal <- data.frame(class=hip_rebal$class,hip_rebal[,1:141])
calcProps(hip_rebal)
rm(hip_rebal)
hip_rebal
em2$p
p <- em2$p#
n2 <- 3000#
hipRebal_strata <- strata(data=hip,stratanames="class",size=p*n2,method='srswr')#
#
#Extract observed data:#
hipRebal <- getdata(hip,hipRebal_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hipRebal <- data.frame(class=hipRebal$class,hip1b[,1:141])#
#
table(hipRebal$class)#
calcProps(hipRebal)
p <- em2$p#
n2 <- 3000#
hipRebal_strata <- strata(data=hip,stratanames="class",size=p*n2,method='srswr')#
#
#Extract observed data:#
hipRebal <- getdata(hip,hipRebal_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hipRebal <- data.frame(class=hipRebal$class,hipRebal[,1:141])#
#
table(hipRebal$class)#
calcProps(hipRebal)
p <- em2$p
p
hipRebal_strata <- strata(data=hip,stratanames="class",size=p*n2,method='srswr')
hipRebal_strata
head(hipRebal_strata)
dim(hipRebal_strata)
class
unique(hip$class)
classes
p <- calcProps(hip)
p
hip1a_strata <- strata(data=hip,stratanames="class",size=p*n1,method='srswr')#
hip1b_strata <- strata(data=hip,stratanames="class",size=p*n2,method='srswr')#
#
#Extract observed data:#
hip1a <- getdata(hip,hip1_strata)#
hip1b <- getdata(hip,hip2_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip1a <- data.frame(class=hip1a$class,hip1a[,1:141])#
hip1b <- data.frame(class=hip1b$class,hip1b[,1:141])#
#
table(hip1a$class)#
table(hip1b$class)
table(hipRebal$class)
#Pull two random data sets from hip, with similar class proportions.#
#One will be treated as 'known', and the other as 'unknown', for classification demo.#
#
p1 <- calcProps(hip)#
p2 <- calcProps(linear)#
n1 <- 1000; n2 <- 3000#
hip2a_strata <- strata(data=hip,stratanames="class",size=p1*n1,method='srswr')#
hip2b_strata <- strata(data=hip,stratanames="class",size=p2*n2,method='srswr')#
#
#Extract observed data:#
hip2a <- getdata(hip,hip2a_strata)#
hip2b <- getdata(hip,hip2b_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip2a <- data.frame(class=hip2a$class,hip2a[,1:141])#
hip2b <- data.frame(class=hip2b$class,hip2b[,1:141])#
#
table(hip2a$class)#
table(hip2b$class)#
#
#Classification is successful here, even when proportions vary a bit.#
ctrl <- trainControl(method='none', classProbs=F) #Fit one model to the data.         #
grid <- data.frame(.mtry=round(sqrt(length(feature_names)))) #Sets a grid of mtry values (just 1, here).#
#
#OOB RF with Feature Selection: Train model using out of box RF. #
ctrl$sampling <- NULL #Adjust sampling parameter in trainControl.#
model2 <- myRF(known=hip2a, unknown=hip2b,ctrl=ctrl,keeps=c('class',feature_names),grid=grid,sampsize=NULL)#
#
#PLOTS:#
#Plot of joint densities for a given feature:#
plot(density(hip2a$logPeriod),type='l',col='black',#
	main='Feature: LogPeriod.  All classes, with different class proportions.')#
lines(density(hip2b$logPeriod),type='l',col='blue')#
#
#SHOW BOTH PLOTS TOGETHER:#
par(mfrow=c(1,2))#
#
#Plot of joint densities for a given feature:#
plot(density(hip1a$logPeriod),type='l',col='black',main='Similar class proportions')#
lines(density(hip1b$logPeriod),type='l',col='blue')#
#
#Plot of joint densities for a given feature:#
plot(density(hip2a$logPeriod),type='l',col='black',main='Different class proportions')#
lines(density(hip2b$logPeriod),type='l',col='blue')#
#
par(mfrow=c(1,2))
#SIM1:#
em1 <- emAllFeatures(known=hip1a,unknown=hip1b,p=rep(.2,5),maxiter=1000,conv=.00000001)#
em1$p#
calcProps(hip1b)#
#
#SIM2:#
em2 <- emAllFeatures(known=hip2a,unknown=hip2b,p=rep(.2,5),maxiter=1000,conv=.00000001)#
em2$p#
calcProps(hip2b)
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
rebal_strata <- strata(data=hip,stratanames="class",size=em2$p*n2,method='srswr')
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
em2$p
hip_rebal <- getdata(hip,rebal_strata)
hip_rebal <- data.frame(class=hip_rebal$class,hip_rebal[,1:141])#
calcProps(hip_rebal)
rbind(unique(hip_rebal$class,calcProps(hip_rebal)))
unique(hip_rebal$class)
calcProps(hip_rebal)
plot(density(hip2a$A14),col='black')#
lines(density(hip2b$A14),col='blue')#
#
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
rebal_strata <- strata(data=hip,stratanames="class",size=em2$p*n2,method='srswr')#
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
em2$p#
#
hip_rebal <- getdata(hip,rebal_strata)#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip_rebal <- data.frame(class=hip_rebal$class,hip_rebal[,1:141])#
unique(hip_rebal$class)#
calcProps(hip_rebal)#
em2$p#
#
lines(density(hip_rebal$A14),col='red')
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
rebal_strata <- strata(data=hip,stratanames="class",size=em2$p*n2,method='srswr')#
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
em2$p#
#
hip_rebal <- getdata(hip,rebal_strata)#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip_rebal <- data.frame(class=hip_rebal$class,hip_rebal[,1:141])#
unique(hip_rebal$class)#
calcProps(hip_rebal)#
em2$p#
#
lines(density(hip_rebal$A14),col='red')
legend(x=0.04,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.5#
	col=c('black','blue','red'))
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.5,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.5,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.1,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.2,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=5,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=2,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=1,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.9,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Proportion Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=1,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=1,#
	col=c('black','blue','red'))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#PLOT 1:#
par(mfrow=c(1,2))#
train <- list(#
	hip2a[hip2a$class=='eb','A14'],#
	hip2a[hip2a$class=='lpv','A14'],#
	hip2a[hip2a$class=='rrab','A14'],#
	hip2a[hip2a$class=='rrc','A14'],#
	hip2a[hip2a$class=='sxp_ds','A14'])#
#
plot(density(train[[1]]),col='black',xlim=c(-.025,.10),main='Training Set Densities: Feature A14')#
lines(density(train[[2]]),col='blue')#
lines(density(train[[3]]),col='red')#
lines(density(train[[4]]),col='forestgreen')#
lines(density(train[[5]]),col='purple')#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#PLOT 2:#
#
#Right slide: Plot 3 densities:#
#1. Density for the feature in test,#
#2. Density for the feature in training,#
#3. Density for the feature in training after adjusting for the change in class proportions.	#
#
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
rebal_strata <- strata(data=hip,stratanames="class",size=em2$p*n2,method='srswr')#
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
em2$p#
#
hip_rebal <- getdata(hip,rebal_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip_rebal <- data.frame(class=hip_rebal$class,hip_rebal[,1:141])#
unique(hip_rebal$class)#
calcProps(hip_rebal)#
em2$p#
#
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=1,#
	col=c('black','blue','red'))
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.75,#
	col=c('black','blue','red'))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#PLOT 1:#
par(mfrow=c(1,2))#
train <- list(#
	hip2a[hip2a$class=='eb','A14'],#
	hip2a[hip2a$class=='lpv','A14'],#
	hip2a[hip2a$class=='rrab','A14'],#
	hip2a[hip2a$class=='rrc','A14'],#
	hip2a[hip2a$class=='sxp_ds','A14'])#
#
plot(density(train[[1]]),col='black',xlim=c(-.025,.10),main='Training Set Densities: Feature A14')#
lines(density(train[[2]]),col='blue')#
lines(density(train[[3]]),col='red')#
lines(density(train[[4]]),col='forestgreen')#
lines(density(train[[5]]),col='purple')#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#PLOT 2:#
#
#Right slide: Plot 3 densities:#
#1. Density for the feature in test,#
#2. Density for the feature in training,#
#3. Density for the feature in training after adjusting for the change in class proportions.	#
#
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
rebal_strata <- strata(data=hip,stratanames="class",size=em2$p*n2,method='srswr')#
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
em2$p#
#
hip_rebal <- getdata(hip,rebal_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip_rebal <- data.frame(class=hip_rebal$class,hip_rebal[,1:141])#
unique(hip_rebal$class)#
calcProps(hip_rebal)#
em2$p#
#
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density using EM Estimates"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.75,#
	col=c('black','blue','red'))
plot(density(train[[1]]),col='black',xlim=c(-.025,.10),#
	main='Training Set Densities by Class: Feature A14')#
lines(density(train[[2]]),col='blue')#
lines(density(train[[3]]),col='red')#
lines(density(train[[4]]),col='forestgreen')#
lines(density(train[[5]]),col='purple')
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#PLOT 1:#
par(mfrow=c(1,2))#
train <- list(#
	hip2a[hip2a$class=='eb','A14'],#
	hip2a[hip2a$class=='lpv','A14'],#
	hip2a[hip2a$class=='rrab','A14'],#
	hip2a[hip2a$class=='rrc','A14'],#
	hip2a[hip2a$class=='sxp_ds','A14'])#
#
plot(density(train[[1]]),col='black',xlim=c(-.025,.10),#
	main='Training Set Densities by Class: Feature A14')#
lines(density(train[[2]]),col='blue')#
lines(density(train[[3]]),col='red')#
lines(density(train[[4]]),col='forestgreen')#
lines(density(train[[5]]),col='purple')#
#
legend(x=0.02,y=25,#
	c('eb','lpv','rrab','rrc','sxp_ds'),#
	lty=c(1,1,1,1,1), lwd=c(2.5,2.5,2.5,2.5,2.5),cex=.75,#
	col=c('black','blue','red','forestgreen','purple'))#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#PLOT 2:#
#
#Right slide: Plot 3 densities:#
#1. Density for the feature in test,#
#2. Density for the feature in training,#
#3. Density for the feature in training after adjusting for the change in class proportions.	#
#
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
rebal_strata <- strata(data=hip,stratanames="class",size=em2$p*n2,method='srswr')#
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
em2$p#
#
hip_rebal <- getdata(hip,rebal_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip_rebal <- data.frame(class=hip_rebal$class,hip_rebal[,1:141])#
unique(hip_rebal$class)#
calcProps(hip_rebal)#
em2$p#
#
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density (EM)"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.75,#
	col=c('black','blue','red'))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#PLOT 1:#
par(mfrow=c(1,2))#
train <- list(#
	hip2a[hip2a$class=='eb','A14'],#
	hip2a[hip2a$class=='lpv','A14'],#
	hip2a[hip2a$class=='rrab','A14'],#
	hip2a[hip2a$class=='rrc','A14'],#
	hip2a[hip2a$class=='sxp_ds','A14'])#
#
plot(density(train[[1]]),col='black',xlim=c(-.025,.10),#
	main='Training Set Densities by Class: Feature A14')#
lines(density(train[[2]]),col='blue')#
lines(density(train[[3]]),col='red')#
lines(density(train[[4]]),col='forestgreen')#
lines(density(train[[5]]),col='purple')#
#
legend(x=0.025,y=30,#
	c('eb','lpv','rrab','rrc','sxp_ds'),#
	lty=c(1,1,1,1,1), lwd=c(2.5,2.5,2.5,2.5,2.5),cex=.75,#
	col=c('black','blue','red','forestgreen','purple'))#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#PLOT 2:#
#
#Right slide: Plot 3 densities:#
#1. Density for the feature in test,#
#2. Density for the feature in training,#
#3. Density for the feature in training after adjusting for the change in class proportions.	#
#
#Rebalance hip data to get estimated density, using est EM proportions from 2nd simulation.#
rebal_strata <- strata(data=hip,stratanames="class",size=em2$p*n2,method='srswr')#
table(rebal_strata$Stratum)#
table(rebal_strata$Stratum)/n2#
em2$p#
#
hip_rebal <- getdata(hip,rebal_strata)#
#
#Move class to first column, drop other columns introduced by strata (ID_unit,prob,etc.)#
hip_rebal <- data.frame(class=hip_rebal$class,hip_rebal[,1:141])#
unique(hip_rebal$class)#
calcProps(hip_rebal)#
em2$p#
#
#Plot training and test set densities.#
plot(density(hip2a$A14),col='black',xlim=c(-.025,.15),main='A14 Feature Densities')#
lines(density(hip2b$A14),col='blue')#
#
#Add rebalanced test set density and legend to plot.#
lines(density(hip_rebal$A14),col='red')#
#
legend(x=0.025,y=30,#
	c("Training Density","Test Density","Rebalanced Test Density (EM)"),#
	lty=c(1,1,1), lwd=c(2.5,2.5,2.5),cex=.75,#
	col=c('black','blue','red'))
