library("mixexp")
opar = par() #make a copy of curent settings
# Enter data, sorted by Al
Team2=data.frame(Al=c(.05,.05,.1,.1,.1,.1125,.125,.125,.15,.15,.175,.175,.2,.2,.225,.25,.3,.3),
ADN=c(.75,.75,.75,.75,.75,.7125,.675,.675,.75,.75,.675,.675,.6,.6,.675,.6,.6,.6),
GAP=c(.2,.2,.15,.15,.15,.175,.2,.2,.1,.1,.15,.15,.2,.2,.1,.15,.1,.1),
Isp=c(259.15,259.71,268.5,272.09,267.73,291.2,289.81,280.51,262.81,254,266.49,270.73,182.93,187.45,175.52,163.67,119.93,124.89))
#
Team2
# function to create lower-bound pseudocomponents
L.pseudo = function(x) {
n.comp = NCOL(x)
scale = 1-sum(apply(x[,-n.comp], 2, min))
x[,-n.comp] = apply(x[,-n.comp], 2, function(y) {y-min(y)}/scale)
return(x)
}
L.pseudo
# function to create upper-bound pseudocomponents
U.pseudo = function(x) {
n.comp = NCOL(x)
scale = sum(apply(x[,-n.comp], 2, max))-1
x[,-n.comp] = apply(x[,-n.comp], 2, function(y) {max(y)-y}/scale)
return(x)
}
# create lower-bound & upper-bound pseudocomponents for non-globule runs
L.dat=L.pseudo(Team2[1:15,])
U.dat=U.pseudo(Team2[1:15,])
L.dat
U.dat
rowSums(L.dat[,1:3])
rowSums(U.dat[,1:3])
# check range  (greater range helps with multicollinearity)
apply(Team2[1:15,1:3], 2, range)  #range with no pseudo-components (unmodfied data)
apply(L.dat[,1:3], 2, range) 	#range with lower pseud-components (the jmp default).  Ranges expand a bit.
apply(U.dat[,1:3], 2, range) #range is greater with upper-bound pseudocomponents, which is the best.
suppressWarnings(car::vif(lm(Isp~0+Al*ADN*GAP, data=Team2[1:15,])))
suppressWarnings(car::vif(lm(Isp~0+Al*ADN*GAP, data=L.dat)))
suppressWarnings(car::vif(lm(Isp~0+Al*ADN*GAP, data=U.dat)))
U.fullmodel=model.matrix(Isp~0+Al*ADN*GAP, data=U.dat)
summary(lm(U.fullmodel[,7]~U.fullmodel[,-7]))
raw.fullmodel=model.matrix(Isp~0+Al*ADN*GAP, data=Team2[1:15,])
summary(lm(raw.fullmodel[,7]~raw.fullmodel[,-7]))
(temp=eigen(cor(U.fullmodel))$values); cat("Condition #", sqrt(max(temp)/min(temp)))
(temp=eigen(cor(raw.fullmodel))$values)
for(i in 1:15) {cat("\np-value of 3-way interaction without obs #",i,"is:",coef(summary(lm(Isp~0+Al*ADN*GAP, data=U.dat[-i,])))[7,4])}
# plots can't be ammended with a title, I end up having to modify the code
# from their function to let me include a title.  The modified function
# is called MixPlot()
MixPlot=function (x = NULL, y = NULL, z = NULL, w = NULL, des = NULL,
res = 400, lims = c(rep(0, 6)), color.palette = heat.colors,
constrts = FALSE, contrs = TRUE, n.breaks = 10, levels = NULL,
cols = FALSE, despts = TRUE, mod = NA, x3lab = "Fraction X3",
x2lab = "Fraction X2", x1lab = "Fraction X1", corner.labs = NULL,
colorkey = list(dx = 0.04, x0 = 0.95, y0 = 0.45, y1 = 0.9,
add = TRUE, mode = "all"), pseudo = FALSE,
user.func = NULL, main="")
{
if ((constrts | pseudo) & sum(lims == rep(0, 6)) == 6) {
stop("Component limits must be specified with the 'lims' argument to plot constraints or to use pseudo components")
}
if (is.null(des)) {
if (is.null(x))
stop("There must be a data frame containing the design, or vectors of known points")
}
else {
x <- des$x3
y <- des$x2
z <- des$x1
w <- des$y
}
base = high = NULL
trian <- expand.grid(base = seq(0, 1, l = res), high = seq(0,
sin(pi/3), l = res))
trian <- subset(trian, (base * sin(pi/3) * 2) > high)
trian <- subset(trian, ((1 - base) * sin(pi/3) * 2) > high)
new2 <- data.frame(z = trian$high * 2/sqrt(3))
new2$x <- trian$base - trian$high/sqrt(3)
new2$y <- 1 - new2$x - new2$z
if (pseudo) {
l.bnds <- lims[seq(1, 5, by = 2)]
sum.bnds <- sum(l.bnds)
new2$x <- l.bnds[3] + (1 - sum.bnds) * new2$x
new2$y <- l.bnds[2] + (1 - sum.bnds) * new2$y
new2$z <- l.bnds[1] + (1 - sum.bnds) * new2$z
x.pseudo <- (x - l.bnds[3])/(1 - sum.bnds)
y.pseudo <- (y - l.bnds[2])/(1 - sum.bnds)
z.pseudo <- (z - l.bnds[1])/(1 - sum.bnds)
}
if (is.na(mod) == FALSE) {
if (mod == 1) {
fm1 = lm(w ~ x + y + z - 1)
}
if (mod == 2) {
fm1 = lm(w ~ x + y + z + x * y + x * z + y * z -
1)
}
if (mod == 3) {
fm1 = lm(w ~ x + y + z + x * y + x * z + y * z +
x * y * z - 1)
}
}
if (is.na(mod) == TRUE) {
if (is.null(user.func) == TRUE) {
stop("There must be a model specified or a user supplied function for predictions on the simplex")
}
else {
trian$w = user.func(grid = new2)
}
}
else {
trian$w = predict(fm1, newdata = data.frame(new2))
}
grade.trellis <- function(from = 0.2, to = 0.8, step = 0.2,
col = 1, lty = 3, lwd = 0.5) {
if (constrts) {
f1 <- lims[1]
t1 <- lims[2]
s1 = t1 - f1
x1 <- seq(f1, t1, s1)
x2 <- x1/2
y2 <- x1 * sqrt(3)/2
x3 <- (1 - x1) * 0.5 + x1
y3 <- sqrt(3)/2 - x1 * sqrt(3)/2
panel.segments(x2, y2, 1 - x2, y2, col = col, lty = 2,
lwd = 2)
f2 <- 1 - lims[4]
t2 <- 1 - lims[3]
s2 <- t2 - f2
x1 <- seq(f2, t2, s2)
x2 <- x1/2
y2 <- x1 * sqrt(3)/2
x3 <- (1 - x1) * 0.5 + x1
y3 <- sqrt(3)/2 - x1 * sqrt(3)/2
panel.segments(x1, 0, x2, y2, col = col, lty = 2,
lwd = 2)
f3 <- lims[5]
t3 <- lims[6]
s3 <- t3 - f3
x1 <- seq(f3, t3, s3)
x2 <- x1/2
y2 <- x1 * sqrt(3)/2
x3 <- (1 - x1) * 0.5 + x1
y3 <- sqrt(3)/2 - x1 * sqrt(3)/2
panel.segments(x1, 0, x3, y3, col = col, lty = 2,
lwd = 2)
}
x1 <- seq(from, to, step)
x2 <- x1/2
y2 <- x1 * sqrt(3)/2
x3 <- (1 - x1) * 0.5 + x1
y3 <- sqrt(3)/2 - x1 * sqrt(3)/2
panel.segments(x1, 0, x2, y2, col = "darkgrey", lty = lty,
lwd = lwd)
panel.text(x1, 0, label = x1, pos = 1)
panel.segments(x1, 0, x3, y3, col = "darkgrey", lty = lty,
lwd = lwd)
panel.text(x2, y2, label = rev(x1), pos = 2)
panel.segments(x2, y2, 1 - x2, y2, col = "darkgrey",
lty = lty, lwd = lwd)
panel.text(x3, y3, label = rev(x1), pos = 4)
}
grade.trellis.pseudo <- function(from = 0.2, to = 0.8, step = 0.2,
col = 1, lty = 3, lwd = 0.5) {
x1 <- (lims[2] - l.bnds[1])/(1 - sum.bnds)
x2 <- x1/2
y2 <- x1 * sqrt(3)/2
x3 <- (1 - x1) * 0.5 + x1
y3 <- sqrt(3)/2 - x1 * sqrt(3)/2
panel.segments(x2, y2, 1 - x2, y2, col = col, lty = 2,
lwd = 2)
x1 <- 1 - (lims[4] - l.bnds[2])/(1 - sum.bnds)
x2 <- x1/2
y2 <- x1 * sqrt(3)/2
x3 <- (1 - x1) * 0.5 + x1
y3 <- sqrt(3)/2 - x1 * sqrt(3)/2
panel.segments(x1, 0, x2, y2, col = col, lty = 2, lwd = 2)
f3 <- lims[5]
t3 <- lims[6]
s3 <- t3 - f3
x1 <- (lims[6] - l.bnds[3])/(1 - sum.bnds)
x2 <- x1/2
y2 <- x1 * sqrt(3)/2
x3 <- (1 - x1) * 0.5 + x1
y3 <- sqrt(3)/2 - x1 * sqrt(3)/2
panel.segments(x1, 0, x3, y3, col = col, lty = 2, lwd = 2)
x1 <- seq(from, to, step)
x2 <- x1/2
y2 <- x1 * sqrt(3)/2
x3 <- (1 - x1) * 0.5 + x1
y3 <- sqrt(3)/2 - x1 * sqrt(3)/2
labx1 <- l.bnds[3] + (1 - sum.bnds) * x1
labx2 <- l.bnds[2] + (1 - sum.bnds) * x1
labx3 <- l.bnds[1] + (1 - sum.bnds) * x1
panel.segments(x1, 0, x2, y2, col = "darkgrey", lty = lty,
lwd = lwd)
panel.text(x1, 0, label = labx1, pos = 1)
panel.segments(x1, 0, x3, y3, col = "darkgrey", lty = lty,
lwd = lwd)
panel.text(x2, y2, label = rev(labx2), pos = 2)
panel.segments(x2, y2, 1 - x2, y2, col = "darkgrey",
lty = lty, lwd = lwd)
panel.text(x3, y3, label = rev(labx3), pos = 4)
}
if (is.null(levels)) {
p <- levelplot(w ~ base * high, trian, aspect = "iso",
xlim = c(-0.1, 1.1), ylim = c(-0.1, 0.96), x3lab = NULL,
x2lab = NULL, contour = contrs, cuts = n.breaks,
labels = TRUE, pretty = TRUE, region = cols, col.regions = color.palette(n = n.breaks +
1), cex.lab = 1.3, par.settings = list(axis.line = list(col = NA),
axis.text = list(col = NA)), panel = function(...,
at = pretty(trian$w, n = 11), contour = TRUE,
labels = pretty(trian$w, n = 11)) {
panel.levelplot(..., at = pretty(trian$w, n = 11),
contour = TRUE, labels = pretty(trian$w, n = 11),
lty = 2, lwd = 0.5, col = 1)
})
}
else {
p <- levelplot(w ~ base * high, trian, aspect = "iso",
at = levels, xlim = c(-0.1, 1.1), ylim = c(-0.1,
0.96), x3lab = NULL, x2lab = NULL, contour = contrs,
labels = TRUE, pretty = TRUE, region = cols, col.regions = color.palette(n = n.breaks +
1), cex.lab = 1.3, par.settings = list(axis.line = list(col = NA),
axis.text = list(col = NA)), panel = function(...,
at = pretty(trian$w, n = 11), contour = TRUE,
labels = pretty(trian$w, n = 11)) {
panel.levelplot(..., at = pretty(trian$w, n = 11),
contour = TRUE, labels = pretty(trian$w, n = 11),
lty = 2, lwd = 0.5, col = 1)
})
}
grid.newpage()
pushViewport(viewport(xscale = p$x.limits, yscale = p$y.limits))
do.call(panel.levelplot, trellis.panelArgs(p, 1))
panel.segments(c(0, 0, 0.5), c(0, 0, sqrt(3)/2), c(1, 1/2,
1), c(0, sqrt(3)/2, 0), lwd = 2)
if (pseudo) {
grade.trellis.pseudo()
}
else {
grade.trellis()
}
panel.text(0, 0, label = corner.labs[2], pos = 2)
panel.text(.55, .82, label = corner.labs[3], pos = 3)
panel.text(1, 0, label = corner.labs[1], pos = 4)
panel.text(0.5, -0.075, x3lab)
panel.text(0.18, 0.5, x2lab, srt = 60)
panel.text(0.82, 0.5, x1lab, srt = -60)
panel.text(0.5, .87, main, pos=3, cex=1.5)
if (despts) {
if (pseudo) {
xpts <- (z.pseudo * sqrt(3)/4) + 0.065 * z.pseudo +
x.pseudo
ypts <- z.pseudo * sqrt(3)/2
panel.points(xpts, ypts, pch = 19, cex = 1.4, col = "black")
}
else {
xpts <- (z * sqrt(3)/4) + 0.065 * z + x
ypts <- z * sqrt(3)/2
panel.points(xpts, ypts, pch = 19, cex = 1.4, col = "black")
}
}
ck.x = colorkey$x0
ck.y.b = colorkey$y0
ck.y.t = colorkey$y1
ck.y = seq(ck.y.b, ck.y.t, len = n.breaks + 2)
d.x = colorkey$dx
d.y = diff(ck.y[1:2])
}
### End of function MixPlot()
des=Team2[1:15,]
colnames(des) = c("x1","x2","x3","y")
des
# First we will plot the full model with the full data set.
MixPlot(des=des,x3lab="Fraction GAP",x2lab="Fraction ADN", pseudo=T,
x1lab="Fraction Al", corner.labs=c("GAP","ADN","Al"), mod=3, cols=T,
lims=c(.05,.225,.6,.75,.1,.2), main=paste("Cubic Model, Full data"),
levels=seq(200,290,10))
MixPlot(des=des,x3lab="Fraction GAP",x2lab="Fraction ADN",
x1lab="Fraction Al",corner.labs=c("GAP","ADN","Al"),mod=3,
levels=c(270,280,290),lims=c(.05,.225,.6,.75,.1,.2),
pseudo=T, main=paste("Cubic Model, Full data"))
par(ask = TRUE) # Prompt you before overwriting the last plot
for(i in 1:15) {
MixPlot(des=des[-i,],x3lab="Fraction GAP",x2lab="Fraction ADN",
x1lab="Fraction Al",corner.labs=c("GAP","ADN","Al"),mod=3,
levels=c(270,280,290),lims=c(.05,.225,.6,.75,.1,.2),
pseudo=T, main=paste("Cubic model without point",i))
}
# Earlier we showed that the 3-way interaction wasn't necessary without point 15:
MixPlot(des=des[-15,],x3lab="Fraction GAP",x2lab="Fraction ADN",
x1lab="Fraction Al",corner.labs=c("GAP","ADN","Al"),mod=2,
levels=c(270,280,290),lims=c(.05,.225,.6,.75,.1,.2),
pseudo=T, main=paste("Quadratic model without point",15))
# For reference, here's the full dataset with a quadratic model
MixPlot(des=des,x3lab="Fraction GAP",x2lab="Fraction ADN",
x1lab="Fraction Al",corner.labs=c("GAP","ADN","Al"),mod=2,
levels=c(270,280,290),lims=c(.05,.225,.6,.75,.1,.2),
pseudo=T, main=paste("Quadratic Model, Full data"))
data<-read.csv("Users:/jennstarling:/UBS - OS Analysis 3-21-2015/osactivity.csv")
data
attach(data)
data<-read.csv("Users/jennstarling/UBS - OS Analysis 3-21-2015/osactivity.csv")
data
data
data<-read.csv("Users\jennstarling\UBS - OS Analysis 3-21-2015\osactivity.csv")
data
data<-read.csv("Macintosh HD\Users\jennstarling\UBS - OS Analysis 3-21-2015\osactivity.csv")
data
data<-read.csv("C:/Users/jennstarling/UBS - OS Analysis 3-21-2015/osactivity.csv")
data
attach(data)
data
data
activity<-read.csv("C:/Users/jennstarling/UBS - OS Analysis 3-21-2015/osactivity.csv")
activity
attach(activity)
activity<-read.csv("/Users/jennstarling/UBS - OS Analysis 3-21-2015/osactivity.csv",headers=T)
activity
attach(activity)
activity<-read.csv("/Users/jennstarling/UBS - OS Analysis 3-21-2015/osactivity.csv")
activity
attach(activity)
data<-read.csv("/Users/jennstarling/UBS - OS Analysis 3-21-2015/osactivity.csv")
data
attach(data)
data
acf(totaltrans)
plot(obs,totaltrans,type='l')
plot(obs,totalshs,type='l')
data<-read.csv("/Users/jennstarling/UBS - OS Analysis 3-21-2015/osactivity.csv")
data
attach(data)
data<-read.csv("/Users/jennstarling/UBS - OS Analysis 3-21-2015/osactivity.csv")
data
attach(data)
corr(fashs,sp500)
corr(fashs,csi)
corr(fashs,UnempRate)
cor(fashs,sp500)
cor(fashs,csi)
cor(fashs,UnempRate)
cor(fashs,sp500)
cor(fashs,CSI)
cor(fashs,UnempRate)
cor(webshs,sp500)
cor(webshs,CSI)
cor(fashs,UnempRate)
#TEST CORRELATIONS FOR WEB SHARES
cor(webshs,sp500)
cor(webshs,CSI)
cor(webhs,UnempRate)
#TEST CORRELATIONS FOR WEB SHARES
cor(webshs,sp500)
cor(webshs,CSI)
cor(webshs,UnempRate)
cor(fashs,sp500)
cor(fashs,CSI)
cor(fashs,UnempRate)
data<-read.csv("/Users/jennstarling/UBS - OS Analysis 3-21-2015/osactivity.csv")
data
attach(data)
data
#TEST CORRELATIONS FOR FA SHARES
cor(fashs,sp500)
cor(fashs,csi)
cor(fashs,cblei)
cor(fashs,unemprate)
cor(webshs,sp500) #Neg value: As SP500 rises, mainstream employees hold shares.
cor(webshs,csi) #Neg value: As Consumer Confidence rises, mainstream emps hold shares.
cor(webshs,cblei)
cor(webshs,unemprate)
#TEST CORRELATIONS FOR WEB SHARES
cor(webshs,sp500) #Neg value: As SP500 rises, mainstream employees hold shares.
cor(webshs,csi) #Neg value: As Consumer Confidence rises, mainstream emps hold shares.
cor(webshs,cblei) #Neg value: As CBLEI rises, mainstream emps hold shares.
cor(webshs,unemprate) #Pos val: As unemployment increases, mainstream emps exercise more shares.
#TEST CORRS FOR TRANSCTION SIZE/NUMBER OF TRANS/TOTAL SH
cor(webshs,webavg)
cor(webshs,webtrans)
cor(webavg,webtrans)
cor(webshs,totlogin)
cor(webshs,ulogin)
cor(fashs,sp500)
cor(fashs,csi)
cor(fashs,cblei)
cor(fashs,unemprate)
acf(totaltrans,label='Autocorrelation: Total Transactions',xlab='Months: Jan 2013 - Feb 2013',
ylab='Web Shares')
acf(totaltrans,main='Autocorrelation: Total Transactions',xlab='Months: Jan 2013 - Feb 2013',
ylab='Web Shares')
acf(totaltrans,main='Autocorrelation: Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
#Total num of transactions is significantly lag-12-month autocorrelated.
#Seasonal transaction patterns.
acf(totaltrans,main='Autocorrelation: Web Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
acf(totshs,main='Autocorrelation: Web Shs',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
#WEB SHS: AUTOCORR TESTING
acf(webtrans,main='Autocorrelation: Web Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
acf(webshs,main='Autocorrelation: Web Shs',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
#------------------------------------------------------
par(mfrow=c(1,2))
#WEB SHS: AUTOCORR TESTING
acf(webtrans,main='Autocorrelation: Web Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
acf(webshs,main='Autocorrelation: Web Shs',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
par(mfrow=c(1,2))
#FA SHS: AUTOCORR TESTING
acf(fatrans,main='Autocorrelation: Web Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
acf(fashs,main='Autocorrelation: Web Shs',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
par(mfrow=c(1,2))
#TOTAL SHS: AUTOCORR TESTING
acf(tottrans,main='Autocorrelation: Web Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
acf(totshs,main='Autocorrelation: Web Shs',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
par(mfrow=c(1,2))
#FA SHS: AUTOCORR TESTING
acf(fatrans,main='Autocorrelation: FA Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
acf(fashs,main='Autocorrelation: FA Shs',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
par(mfrow=c(1,2))
#TOTAL SHS: AUTOCORR TESTING
acf(tottrans,main='Autocorrelation: Total Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
acf(totshs,main='Autocorrelation: Total Shs',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
par(mfrow=c(1,2))
#BATCH SHS: AUTOCORR TESTING
acf(batchtrans,main='Autocorrelation: Total Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
acf(batchshs,main='Autocorrelation: Total Shs',xlab='Lag in Months',
ylab='Web Shares Autocorrelation')
par(mfrow=c(1,2))
#BATCH SHS: AUTOCORR TESTING
acf(batchtrans,main='Autocorrelation: Total Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorr')
acf(batchshs,main='Autocorrelation: Total Shs',xlab='Lag in Months',
ylab='Web Shares Autocorr')
par(mfrow=c(1,2))
#BATCH SHS: AUTOCORR TESTING
acf(batchtrans,main='Autocorrelation: Batch Shs Total Transactions',xlab='Lag in Months',
ylab='Web Shares Autocorr')
acf(batchshs,main='Autocorrelation: Batch Shs',xlab='Lag in Months',
ylab='Web Shares Autocorr')
cor(fashs,sp500)
cor(fashs,csi)
cor(fashs,cblei)
cor(fashs,unemprate)
